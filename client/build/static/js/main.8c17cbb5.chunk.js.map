{"version":3,"sources":["components/InputWithButton/index.js","components/Welcome/index.js","components/Message/index.js","components/Chat/index.js","components/OnlineList/index.js","components/Video/createPeerConnections.js","components/Video/setOutConnectionHandlers.js","components/Video/index.js","components/Room/index.js","components/Room/getRoomID.js","components/App/isNameDuplicated.js","components/App/isNameLengthValid.js","components/App/index.js","index.js"],"names":["InputWithButton","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onInputChange","event","setState","inputValue","target","value","onButtonClick","state","onClick","props","handleEnter","window","keyCode","_button","click","getInputRef","node","_input","getButtonRef","addEventListener","removeEventListener","_this$props","children","objectWithoutProperties","react_default","a","createElement","react","assign","type","onChange","ref","Component","withRouter","_ref","submitName","roomID","setRoom","nameError","history","duplicateName","notValidLength","className","components_InputWithButton","placeholder","createRoom","ID","uniqid","push","concat","Message","text","unixTime","user","myMessage","time","Date","toTimeString","slice","Chat","sendMessage","name","socket","msg","now","emit","getRefChatWindow","_chatWindow","messages","_this2","on","toConsumableArray","message","scrollTop","clientHeight","scrollHeight","map","src_components_Message","key","OnlineList","onlineUsers","closeList","length","id","createPeerConnections","array","i","peerConnection","RTCPeerConnection","setOutConnectionHandlers","isEnd","isNegotiating","createOffer","offerToReceiveVideo","offerToReceiveAudio","then","offer","setLocalDescription","_ref2","candidate","e","signalingState","Video","startSession","usersNum","outPeerConnections","navigator","mediaDevices","getUserMedia","video","audio","mediaStream","forEach","peerConnectionWithID","arr","getTracks","track","addTrack","catch","error","console","log","finishSession","stop","connectedCounter","handleVideoShow","setVideoToEl","_videoRef","srcObject","isAllConnected","_this$state","getVideoRef","minePeerConnection","nameSource","showStream","socketPeerID","peerID","Promise","resolve","reject","socketID","peer","addIceCandidate","createAnswer","answer","setRemoteDescription","iceConnectionState","ontrack","streams","prevState","dir","prevProps","_this$state2","autoPlay","Room","triggerOnlineList","showOnlineList","setOnlineUsers","io","component","pathArray","location","pathname","split","pop","getRoomID","room","oldProps","newProps","_this$props2","src_components_OnlineList","src_components_Chat","src_components_Video","isNameDuplicated","users","isNameLengthValid","App","Route","exact","path","render","src_components_Room","src_components_Welcome","ReactDOM","BrowserRouter","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.8c17cbb5.chunk.js","sourcesContent":["import React, { Fragment, Component } from 'react';\r\n\r\n\r\nclass InputWithButton extends Component {\r\n\r\n\r\n    constructor () {\r\n        super();\r\n\r\n        this.state = {\r\n            inputValue: ''\r\n        }\r\n    }\r\n\r\n    onInputChange = (event) => {\r\n        this.setState({\r\n            inputValue: event.target.value\r\n        });\r\n    };\r\n\r\n    // Executes main function(from props) and removes input's value\r\n    onButtonClick = () => {\r\n        const { inputValue } = this.state;\r\n        const { onClick } = this.props;\r\n\r\n        onClick(inputValue);\r\n\r\n        this.setState({\r\n            inputValue: ''\r\n        });\r\n    };\r\n\r\n    // Clicks the button when pressing Enter in focus on smth\r\n    handleEnter = (event) => {\r\n        event = event || window.event;\r\n\r\n        if (event.keyCode === 13) {\r\n            this._button.click();\r\n        }\r\n    };\r\n\r\n    // Creates handler at chat-input\r\n    componentDidMount () {\r\n        this._input.addEventListener('keyup', this.handleEnter);\r\n    }\r\n\r\n    componentWillUnmount () {\r\n        this._input.removeEventListener('keyup', this.handleEnter);\r\n    }\r\n\r\n    getInputRef = (node) => this._input = node;\r\n    getButtonRef = (node) => this._button = node;\r\n\r\n    render () {\r\n        const { inputValue } = this.state;\r\n        const {\r\n            children,\r\n            onClick,\r\n            ...props\r\n        } = this.props;\r\n\r\n        return (\r\n            <Fragment>\r\n                <input\r\n                    type=\"text\"\r\n                    value={inputValue}\r\n                    onChange={this.onInputChange}\r\n                    ref={this.getInputRef}\r\n                    { ...props }\r\n                />\r\n                <button\r\n                    onClick={this.onButtonClick}\r\n                    ref={this.getButtonRef}\r\n                >\r\n                    {children}\r\n                </button>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default InputWithButton;","import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport uniqid from 'uniqid';\r\n\r\nimport InputWithButton from '../InputWithButton';\r\n\r\nimport './index.css';\r\n\r\n\r\n\r\nconst Welcome = ({\r\n         submitName,\r\n         roomID,\r\n         setRoom,\r\n         nameError,\r\n         history\r\n    }) => {\r\n\r\n    const onClick = (inputValue) => {\r\n        const createRoom = submitName(inputValue);\r\n\r\n        // If we haven't room and username is valid, creates new room and redirects to it\r\n        if (!roomID && createRoom) {\r\n            const ID = uniqid();\r\n            setRoom(ID);\r\n\r\n            history.push(`/room/${ID}`);\r\n        }\r\n    };\r\n\r\n\r\n    const { duplicateName, notValidLength } = nameError;\r\n\r\n    return (\r\n        <div className='welcome-fixed'>\r\n            <div className=\"welcome\">\r\n                Please, enter your name:\r\n                <InputWithButton\r\n                    placeholder={notValidLength ? 'Invalid name' : (duplicateName ? 'User already exists' : 'Nikita')}\r\n                    className={duplicateName || notValidLength ? 'error' : ''}\r\n                    onClick={onClick}\r\n                >\r\n                    SUBMIT\r\n                </InputWithButton>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\n\r\nexport default withRouter(Welcome);","import React from 'react';\r\n\r\nimport './index.css';\r\n\r\n\r\n\r\nconst Message = ({\r\n        text,\r\n        unixTime,\r\n        user,\r\n        myMessage\r\n    }) => {\r\n\r\n    // Converts unixTime to HH:MM:SS\r\n    const time = `${(new Date(unixTime)).toTimeString().slice(0, 8)}`;\r\n\r\n    return (\r\n        <li\r\n            className={'msg ' +  (myMessage ? 'my-msg' : '')}\r\n        >\r\n            <header className='msg-header'>\r\n                {user + ' at ' + time}\r\n            </header>\r\n            <main className='msg-mainText'>\r\n                {text}\r\n            </main>\r\n        </li>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default Message;","import React, { Component } from 'react';\r\n\r\nimport Message from '../Message';\r\nimport InputWithButton from '../InputWithButton';\r\n\r\nimport './index.css';\r\n\r\n\r\n\r\nclass Chat extends Component {\r\n\r\n    constructor () {\r\n        super();\r\n\r\n        this.state = {\r\n            messages: []\r\n        }\r\n    }\r\n\r\n    // Sends message to all users in the room\r\n    sendMessage = (inputValue) => {\r\n        const { name, socket } = this.props;\r\n\r\n        if (inputValue !== '' && name) {\r\n            const msg = {\r\n                text: inputValue,\r\n                unixTime: Date.now(),\r\n                user: name,\r\n                myMessage: false\r\n            };\r\n\r\n            socket.emit('message', msg);\r\n        }\r\n    };\r\n\r\n    componentDidMount () {\r\n        const { socket } = this.props;\r\n\r\n        // Updates messages's state when a new message arrives\r\n        socket.on('message', (msg) => {\r\n            const { messages } = this.state;\r\n\r\n            this.setState({\r\n                messages: [...messages, msg]\r\n            });\r\n        });\r\n\r\n        // Creates listener to the chat; auto-scrolling when a new message arrives\r\n        this._chatWindow.addEventListener('DOMNodeInserted', function(event) {\r\n            const message = event.target;\r\n\r\n            if (this.scrollTop + message.clientHeight + 30 > this.scrollHeight - this.clientHeight)\r\n                this.scrollTop = this.scrollHeight;\r\n        });\r\n    }\r\n\r\n    getRefChatWindow = (node) => this._chatWindow = node;\r\n\r\n    render () {\r\n        const { messages } = this.state;\r\n\r\n        return (\r\n            <div className='Room-chat'>\r\n                <div\r\n                    className='Room-chat-messages'\r\n                    ref={this.getRefChatWindow}\r\n                >\r\n                    <ul>\r\n                        {\r\n                            messages.map(message => {\r\n                                const {\r\n                                    text,\r\n                                    unixTime,\r\n                                    user,\r\n                                    myMessage\r\n                                } = message;\r\n\r\n                                return (\r\n                                    <Message\r\n                                        text={text}\r\n                                        unixTime={unixTime}\r\n                                        user={user}\r\n                                        myMessage={myMessage}\r\n                                        key={unixTime}\r\n                                    />\r\n                                );\r\n                            })\r\n                        }\r\n                    </ul>\r\n                </div>\r\n                <div className='Room-chat-input'>\r\n                    <InputWithButton\r\n                        onClick={this.sendMessage}\r\n                        placeholder='Type here...'\r\n                    >\r\n                        <i className=\"fas fa-comment\"/>\r\n                    </InputWithButton>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Chat;","import React from 'react';\r\n\r\nimport './index.css'\r\n\r\n\r\nconst OnlineList = ({ onlineUsers, closeList }) => {\r\n\r\n    return (\r\n        <div className='onlineList'>\r\n            <header>\r\n                {onlineUsers.length} User(s) Online now:\r\n            </header>\r\n            <main>\r\n                <ul>\r\n                    {\r\n                        onlineUsers.map((user) => {\r\n                            return (\r\n                                <li\r\n                                    className='onlineList-user'\r\n                                    key={user.id}\r\n                                >\r\n                                    {user.name}\r\n                                </li>\r\n                            );\r\n                        })\r\n                    }\r\n                </ul>\r\n            </main>\r\n            <button onClick={closeList}>\r\n                Close\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default OnlineList;","\r\nexport default function (length) {\r\n    let array = [];\r\n\r\n    for (let i = 0; i < length; i++) {\r\n        array.push({\r\n            peerConnection: new RTCPeerConnection(null),\r\n            id: i\r\n        });\r\n    }\r\n\r\n    return array;\r\n}","export default function (socket, { peerConnection, id }, isEnd) {\r\n\r\n    let isNegotiating = false;\r\n\r\n    // Triggers when .addTrack is called\r\n    peerConnection.addEventListener(\"negotiationneeded\", () => {\r\n\r\n        if (isNegotiating) {\r\n            return;\r\n        }\r\n        isNegotiating = true;\r\n\r\n        // Creates a first offer and set it to localDescription\r\n        peerConnection.createOffer({\r\n            offerToReceiveVideo: true,\r\n            offerToReceiveAudio: true\r\n        })\r\n            .then((offer) => {\r\n                // Sets SDP for the first time\r\n                peerConnection.setLocalDescription(offer);\r\n\r\n                // If this is the last peer that have to offer\r\n                if (isEnd) {\r\n                    socket.emit('sdp-creator-offer-end', offer, id)\r\n                }\r\n                else {\r\n                    socket.emit('sdp-creator-offer', offer, id);\r\n                }\r\n\r\n            });\r\n\r\n    });\r\n\r\n\r\n    peerConnection.addEventListener(\"icecandidate\", ({ candidate }) => {\r\n        if (candidate) {\r\n            socket.emit('candidate-creator-first', candidate, id)\r\n        }\r\n\r\n    });\r\n\r\n    // skip nested negotiations\r\n    peerConnection.addEventListener(\"signalingstatechange\", (e) => {\r\n        isNegotiating = (peerConnection.signalingState !== \"stable\");\r\n    });\r\n\r\n}","import React, { Component } from 'react';\r\n\r\nimport './index.css'\r\n\r\nimport createPeerConnections from './createPeerConnections';\r\nimport setOutConnectionHandlers from './setOutConnectionHandlers';\r\n\r\nclass Video extends Component {\r\n\r\n    constructor () {\r\n        super();\r\n\r\n        this.state = {\r\n            mediaStream: null,      // Video-stream from us\r\n            outPeerConnections: [],\r\n            minePeerConnection: null,\r\n            nameSource: null,\r\n            showStream: false,      // triggers when someone started/finished stream\r\n            connectedCounter: 0\r\n        }\r\n    }\r\n\r\n    startSession = () => {\r\n        const { usersNum, socket } = this.props;\r\n        const mediaConst = {\r\n            video: true,\r\n            audio: true\r\n        };\r\n\r\n        // creating peerConnection with ID to everyone in the room expect of us [array]\r\n        const outPeerConnections = createPeerConnections(usersNum - 1);\r\n        // Gets a content from your device\r\n        navigator.mediaDevices.getUserMedia(mediaConst)\r\n            .then((mediaStream) => {\r\n\r\n                // For all outgoing connections\r\n                outPeerConnections.forEach((peerConnectionWithID, i, arr) => {\r\n                    const { peerConnection } = peerConnectionWithID;\r\n                    // Set up tracks\r\n                    mediaStream.getTracks()\r\n                        .forEach((track) => peerConnection.addTrack(track, mediaStream));\r\n\r\n                    // Handlers and signaling\r\n                    setOutConnectionHandlers(socket, peerConnectionWithID, i === (arr.length - 1));\r\n\r\n                });\r\n\r\n                // Saves out mediaStream to have an ability to stop him in the future\r\n                this.setState({\r\n                    mediaStream,\r\n                    outPeerConnections\r\n                });\r\n\r\n            })\r\n            .catch((error) => {\r\n                console.log('navigator.getUserMedia error: ', error);\r\n            });\r\n\r\n    };\r\n\r\n    finishSession = () => {\r\n        const { mediaStream } = this.state;\r\n        const { socket } = this.props;\r\n\r\n        // Clears all mediaStreams\r\n        mediaStream.getTracks().forEach(track => track.stop());\r\n        // Sends to other participants event to close session\r\n        socket.emit('close-video');\r\n        // Return to initial state\r\n        this.setState({\r\n            mediaStream: null,\r\n            outPeerConnections: [],\r\n            connectedCounter: 0\r\n        })\r\n    };\r\n\r\n    // Handles start/stop streaming\r\n    handleVideoShow = () => {\r\n        const { mediaStream } = this.state;\r\n\r\n        !mediaStream ? this.startSession() : this.finishSession();\r\n    };\r\n\r\n\r\n    // Setting the video element\r\n    setVideoToEl = (mediaStream) => {\r\n        if (this._videoRef) {\r\n            if (this._videoRef.srcObject) {\r\n                return;\r\n            }\r\n\r\n            this._videoRef.srcObject = mediaStream;\r\n        }\r\n    };\r\n\r\n\r\n    componentDidMount () {\r\n        const { socket } = this.props;\r\n\r\n        socket.on('already-streaming', () => {\r\n            this.setState({\r\n                showStream: true\r\n            })\r\n        });\r\n\r\n        socket.on('sdp-creator-offer', (offer, nameSource) => {\r\n\r\n            const minePeerConnection = new RTCPeerConnection(null);\r\n\r\n            let socketPeerID;\r\n            let peerID;\r\n\r\n            // Adds a candidate and emits an answer in response to the offer\r\n            new Promise((resolve, reject) =>\r\n                socket.on('candidate-creator-first', (candidate, socketID, peer) => {\r\n                    minePeerConnection.addIceCandidate(candidate)\r\n                        .catch(() => console.log('Error to add IceCandidate, peerID: ', peerID));\r\n\r\n\r\n                    socketPeerID = socketID;\r\n                    peerID = peer;\r\n                    resolve(socketPeerID);\r\n                })\r\n            )\r\n                .then((socketPeerID) => {\r\n                    minePeerConnection.createAnswer()\r\n                        .then(answer => {\r\n                            minePeerConnection.setLocalDescription(answer);\r\n\r\n                            socket.emit('sdp-answer', answer, socketPeerID);\r\n                        });\r\n                });\r\n\r\n            // Sets the accepted offer\r\n            minePeerConnection.setRemoteDescription(offer)\r\n                .catch(() => console.log('Can\\'t to establish connection, peerID: ', peerID));\r\n\r\n            // if connection break off, or hoster went away\r\n            minePeerConnection.addEventListener(\"iceconnectionstatechange\", () => {\r\n                if (minePeerConnection.iceConnectionState === \"failed\" ||\r\n                    minePeerConnection.iceConnectionState === \"disconnected\" ||\r\n                    minePeerConnection.iceConnectionState === \"closed\") {\r\n                    this.setVideoToEl(null);\r\n                    this.setState({\r\n                        showStream: false,\r\n                        minePeerConnection: null\r\n                    });\r\n                }\r\n            });\r\n\r\n            minePeerConnection.addEventListener(\"icecandidate\", ({ candidate }) => {\r\n                if (candidate) {\r\n                    socket.emit('candidate-receiver', candidate, socketPeerID, peerID)\r\n                }\r\n            });\r\n\r\n            // Set up the media when tracks(mediaStream) arrives from the source\r\n            minePeerConnection.ontrack = (event) => {\r\n                this.setState({\r\n                    showStream: true\r\n                });\r\n\r\n                this.setVideoToEl(event.streams[0]);\r\n            };\r\n\r\n\r\n            this.setState({\r\n                minePeerConnection,\r\n                nameSource\r\n            })\r\n        });\r\n\r\n\r\n\r\n\r\n        socket.on('sdp-answer', (answer, peerID) => {\r\n            const { outPeerConnections } = this.state;\r\n\r\n            // Accepts answer and sets it up\r\n            outPeerConnections[peerID].peerConnection.setRemoteDescription(answer)\r\n                .then(() => {\r\n                    this.setState((prevState) => ({\r\n                        connectedCounter: ++prevState.connectedCounter\r\n                    }));\r\n                })\r\n                .catch(() => console.dir('Can\\'t to establish connection, peerID: ', peerID, outPeerConnections));\r\n\r\n\r\n            // Tries to add a candidate when he is ready\r\n            socket.on('candidate-receiver', (candidate, socketPeerID, peerID) => {\r\n                outPeerConnections[peerID].peerConnection.addIceCandidate(candidate)\r\n                    .catch(() => console.log('Error addIceCandidate, peerID: ', peerID));\r\n            });\r\n\r\n\r\n        });\r\n\r\n\r\n        // Signal to close session from the source\r\n        socket.on('close-video', () => {\r\n            this.setVideoToEl(null);\r\n            this.setState({\r\n                showStream: false,\r\n                minePeerConnection: null,\r\n                nameSource: null\r\n            });\r\n\r\n        });\r\n\r\n\r\n    }\r\n    // True when all outgoing peers is exchanging\r\n    isAllConnected = () => {\r\n        const { outPeerConnections, connectedCounter } = this.state;\r\n\r\n        return connectedCounter === outPeerConnections.length\r\n    };\r\n\r\n    // If we started a session, it will set the video at our element\r\n    componentDidUpdate (prevProps, prevState) {\r\n        const { mediaStream } = this.state;\r\n\r\n        if (prevState.mediaStream !== mediaStream && mediaStream) {\r\n            this.setVideoToEl(mediaStream);\r\n        }\r\n    }\r\n\r\n    getVideoRef = (node) => this._videoRef = node;\r\n\r\n    render () {\r\n        const {\r\n            mediaStream,\r\n            showStream,\r\n            nameSource\r\n        } = this.state;\r\n\r\n\r\n        return (\r\n            <div className='video'>\r\n                {\r\n                    mediaStream || showStream ?\r\n                        <div className='video-stream'>\r\n                            {\r\n                                nameSource ?\r\n                                    <span className='streamer-name'>\r\n                                        {nameSource} is streaming now\r\n                                    </span>\r\n                                    :\r\n                                    null\r\n                            }\r\n                            <video\r\n                                autoPlay={true}\r\n                                ref={this.getVideoRef}\r\n                            />\r\n                        </div>\r\n\r\n                        :\r\n                        null\r\n                }\r\n                {\r\n                    !showStream ?\r\n                            (\r\n                                this.isAllConnected() ?\r\n                                    <button onClick={this.handleVideoShow}>\r\n                                        { mediaStream ? 'Stop streaming' : 'Start Streaming' }\r\n                                    </button>\r\n                                    :\r\n                                    <i className=\"fas fa-spinner\" />\r\n                            )\r\n                        :\r\n                        null\r\n                }\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Video;","import React, { Component, Fragment } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport io from 'socket.io-client';\r\n\r\nimport Chat from '../Chat';\r\nimport OnlineList from '../OnlineList';\r\nimport Video from '../Video';\r\n\r\nimport './index.css';\r\n\r\nimport getRoomID from './getRoomID';\r\n\r\n\r\n\r\nclass Room extends Component {\r\n\r\n    constructor () {\r\n        super();\r\n\r\n        this.state = {\r\n            socket: null,\r\n            showOnlineList: false\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount () {\r\n        const {\r\n            name,\r\n            roomID,\r\n            setRoom,\r\n            setOnlineUsers\r\n        } = this.props;\r\n\r\n        // Establishes a socket-connection and saves it to State for reuse\r\n        const socket = io();\r\n        this.setState({ socket });\r\n\r\n        // Gets ID of our room from this.props.location\r\n        const ID = getRoomID(this);\r\n        // If user have been invited by the link, remembers room's ID in the App\r\n        if (!roomID) {\r\n            setRoom(ID);\r\n        }\r\n\r\n        // Establishes connect with room\r\n        socket.emit('connectToRoom', roomID || ID, name);\r\n        // Updates currently users when someone has joined/disconnected\r\n        socket.on('updatedRoom', (room) => {\r\n            const { onlineUsers } = room;\r\n            setOnlineUsers(onlineUsers);\r\n        })\r\n\r\n    }\r\n\r\n    componentDidUpdate(oldProps) {\r\n        const newProps = this.props;\r\n        const { socket } = this.state;\r\n\r\n        // If an invited user has entered the name, adds him to the list of users\r\n        if(oldProps.name !== newProps.name) {\r\n            socket.emit('addUser', newProps.name);\r\n        }\r\n    }\r\n\r\n    // Show / hide online users\r\n    triggerOnlineList = () => {\r\n        this.setState(prevState => ({\r\n            showOnlineList: !prevState.showOnlineList\r\n        }))\r\n    };\r\n\r\n\r\n    render () {\r\n        const { socket, showOnlineList } = this.state;\r\n        const { name, onlineUsers } = this.props;\r\n\r\n        return (\r\n            <div className='Room'>\r\n                {\r\n                    showOnlineList ?\r\n                        <OnlineList\r\n                            onlineUsers={onlineUsers}\r\n                            closeList={this.triggerOnlineList}\r\n                        />\r\n                        :\r\n                        null\r\n                }\r\n                <header className='Room-header'>\r\n                    This is the private chat-room,&nbsp;\r\n                    <span\r\n                        className='span-online'\r\n                        onClick={this.triggerOnlineList}\r\n                    >\r\n                        now Online\r\n                    </span>: {onlineUsers.length}\r\n                </header>\r\n                {\r\n                    socket ?\r\n                        <Fragment>\r\n                            <Chat\r\n                                name={name}\r\n                                socket={socket}\r\n                            />\r\n                            <Video\r\n                                socket={socket}\r\n                                usersNum={onlineUsers.length}\r\n                            />\r\n                        </Fragment>\r\n                        :\r\n                        null\r\n                }\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default withRouter(Room);","export default function (component) {\r\n\r\n    const pathArray = component.props.location.pathname.split('/');\r\n\r\n    for (let i = pathArray.length - 1; i >= 0; i--) {\r\n        if (pathArray[i] === '') {\r\n            pathArray.pop()\r\n        }\r\n        else {\r\n            break;\r\n        }\r\n    }\r\n    return pathArray[pathArray.length - 1];\r\n}","export default function (name, users) {\r\n\r\n    for (let i = 0; i < users.length; i++) {\r\n        if (users[i].name === name) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}","export default function (name) {\r\n    return !(name.length < 20)\r\n}","import React, { Component } from 'react';\nimport { Route } from 'react-router-dom'\n\nimport Welcome from '../Welcome';\nimport Room from '../Room';\n\nimport isNameDuplicated from './isNameDuplicated';\nimport isNameLengthValid from './isNameLengthValid'\n\n\nclass App extends Component {\n\n    constructor () {\n        super();\n\n        this.state = {\n            name: null,     // username\n            roomID: null,   // current room's id\n            nameError: {\n                duplicateName: false,\n                notValidLength: false\n            },\n            onlineUsers: []\n        }\n    }\n\n    // Returns true if username is successfully created, else - false\n    submitName = (name) => {\n        const { onlineUsers } = this.state;\n\n        // Is name valid\n        const duplicateName = isNameDuplicated(name, onlineUsers);\n        const notValidLength = isNameLengthValid(name);\n\n        this.setState({\n            nameError: { duplicateName, notValidLength }\n        });\n\n\n        if (name !== '' && !notValidLength\n            && !duplicateName && !duplicateName) {\n\n            this.setState({\n                name\n            });\n\n            return true;\n        }\n\n        return false;\n    };\n\n\n    setRoom = (roomID) => {\n        this.setState({ roomID })\n    };\n\n    setOnlineUsers = (onlineUsers) => {\n        this.setState({ onlineUsers });\n    };\n\n\n\n    render() {\n        const {\n            name,\n            roomID,\n            nameError,\n            onlineUsers\n        } = this.state;\n\n        return (\n            <div className=\"App\">\n                <div className=\"container\">\n                    <Route exact path='/room/:ID' render={() =>\n                        <Room\n                            name={name}\n                            roomID={roomID}\n                            setRoom={this.setRoom}\n                            setOnlineUsers={this.setOnlineUsers}\n                            onlineUsers={onlineUsers}\n                        />\n                    }/>\n                    {       // While we haven't got the user's name\n                        !name || nameError.duplicateName || nameError.notValidLength ?\n                            <Welcome\n                                submitName={this.submitName}\n                                setRoom={this.setRoom}\n                                roomID={roomID}\n                                nameError={nameError}\n                            />\n                            :\n                            null\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport './index.css';\n\nimport App from './components/App';\n\n\n\nReactDOM.render((\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n), document.getElementById('root'));\n\n\n\nif (module.hot) {\n    module.hot.accept();\n}\n"],"sourceRoot":""}